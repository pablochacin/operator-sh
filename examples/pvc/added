#!/bin/bash
source lib/log.sh

source "$(dirname ${BASH_SOURCE[0]})/manifests.sh"

LOG_LEVEL=$LOG_LEVEL_DEBUG

log_info "Processing event ${EVENT_TYPE} for object ${EVENT_OBJECT_KIND}/${EVENT_OBJECT_METADATA_NAME}"

STORAGE_CLASS=${STORAGE_CLASS:-local-storage}
RECLAIM_POLICY=${RECLAIM_POLICY:-Retain}

# only process pvc for selected storage class
PVC_STORAGE_CLASS=$EVENT_OBJECT_SPEC_STORAGECLASSNAME
if [[ "$PVC_STORAGE_CLASS" != "$STORAGE_CLASS" ]]; then
   log_info "Ignoring event for storage class $PVC_STORAGE_CLASS"
   exit
fi

# name of the claim (used for binding it)
PVC_NAME=$EVENT_OBJECT_METADATA_NAME
PVC_NAMESPACE=$EVENT_OBJECT_METADATA_NAMESPACE

# node on which the volume must be allocated
NODE_SELECTOR=$EVENT_OBJECT_SPEC_SELECTOR_MATCHLABELS_KUBERNETES_IO_HOSTNAME

# volume size
VOL_SIZE=$EVENT_OBJECT_SPEC_RESOURCES_REQUESTS_STORAGE

JOB_NAME="${PVC_NAME}-create"
JOB_CMD="mkdir"
JOB_CMD_ARGS="-p"
JOB_TIMEOUT=${JOB_TIMEOUT:-30s}

job_template | kubectl apply -f -
kubectl wait  --for=condition=Complete=true --timeout=${JOB_TIMEOUT} job ${JOB_NAME}
if [[ $? -eq 0 ]]; then 
    kubectl delete job ${JOB_NAME}
    pv_template | kubectl apply -f -
else
    log_error "job ${JOB_NAME} failed to complete"
fi
